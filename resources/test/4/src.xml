<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="4.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<class>class <name>A</name> <block>{<private type="default">
</private><public>public:
	<function><type><name>int</name></type> <name>f</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function><type><name>int</name></type> <name>g</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function><type><name>int</name></type> <name>q</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>

	<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
</public>}</block>;</class>

<class>class <name>B</name> <block>{<private type="default">
</private><public>public:
	<function><type><name>int</name></type> <name>f</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function><type><name>int</name></type> <name>g</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function><type><name>int</name></type> <name>w</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function><type><name>A</name></type> <name>getA</name><parameter_list>()</parameter_list> <block>{
	    <decl_stmt><decl><specifier>static</specifier> <type><name>A</name></type> <name>t</name></decl>;</decl_stmt>
	    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>num</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	    <return>return <expr><name>t</name></expr>;</return>
	}</block></function>
</public>}</block>;</class>



<function><type><name>int</name></type> <name>l4cs.Main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>A</name></type> <name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>B</name></type> <name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>s1</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>f</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>a</name><operator>.</operator><name>g</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>a</name><operator>.</operator><name>q</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>s2</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>f</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>b</name><operator>.</operator><name>g</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>b</name><operator>.</operator><name>w</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>s3</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>getA</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>f</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>s4</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>getA</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>g</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>b</name><operator>.</operator><name>getA</name></name><argument_list>()</argument_list></call><operator>.</operator><name>num</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
