<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="home/ft/src.java"><class><specifier>public</specifier> class <name>test</name> <block>{
    <class><specifier>public</specifier> class <name>A</name> <block>{
        <function><type><name>int</name></type> <name>f</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></function>
        <function><type><name>int</name></type> <name>g</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></function>
        <function><type><name>int</name></type> <name>q</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></function>
        <decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
    }</block></class>
    <class><specifier>public</specifier> class <name>B</name> <block>{
        <function><type><name>int</name></type> <name>f</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></function>
        <function><type><name>int</name></type> <name>g</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></function>
        <function><type><name>int</name></type> <name>w</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></function>
        <function><type><name>A</name></type> <name>getA</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>A</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>A</name></type> <name>a</name> <init>= <expr><operator>new</operator> <call><name>A</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>B</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>B</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>s1</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>f</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>a</name><operator>.</operator><name>g</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>a</name><operator>.</operator><name>q</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>s2</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>f</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>b</name><operator>.</operator><name>g</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>b</name><operator>.</operator><name>w</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>s3</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>getA</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>f</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>s4</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>getA</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>g</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>b</name><operator>.</operator><name>getA</name></name><argument_list>()</argument_list></call><operator>.</operator><name>num</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>
}</block></class>
</unit>
